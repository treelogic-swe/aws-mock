apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'jetty'
apply plugin: 'checkstyle'

version = '0.1'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

allprojects {
    repositories {
        mavenCentral()
    }
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    compile 'log4j:log4j:1.2.17'
    compile 'org.freemarker:freemarker:2.3.20'
    compile fileTree(dir: 'libs', include: '*.jar')
    
    testCompile "junit:junit:4.9"
    testCompile "com.amazonaws:aws-java-sdk:1.5.3"
}

eclipse {
    classpath {
        containers.clear()
        containers.add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6')
        containers.add('org.eclipse.jst.j2ee.internal.web.container')
    }
}

sourceSets {
    test
}

compileJava.dependsOn ":cxf-stub:cxfStubJar"
eclipseClasspath.dependsOn ":cxf-stub:cxfStubJar"

task sourcesJar(type:Jar, dependsOn: classes){
    classifier = 'sources'
    // from sourceSets.main.allSource
    from sourceSets.main.allJava.srcDirs
    include "**/*.java"
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

jettyRun.httpPort = 8000                // Port for test
[jettyRun,jettyStop]*.stopPort = 8091   // Port for stop signal
[jettyRun,jettyStop]*.stopKey = 'foobar'

task run(dependsOn: jettyRun) {

}

test.doFirst {
    println '---- starting aws-mock on jetty before tests start ----'
    jettyRun.daemon = true
    tasks.jettyRun.execute()
}

// this is one working way to finally run jettyStop after test despite of success or failure
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if(task == test) {
        tasks.jettyStop.execute()
        println '---- stopped jetty after tests ended ----'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    exclude('log4j.properties')
}



